#
# Add automatic templates
#
include:
  ## - template: License-Scanning.gitlab-ci.yml
  ##
  ## Scan dependencies for known vulnerabilities
  ##
  - template: Dependency-Scanning.gitlab-ci.yml
  ##
  ## Static analysis security testing
  ##
  - template: SAST.gitlab-ci.yml

variables:
  ##
  ## Java version
  ##
  JAVA_VERSION: 11
  LM_JAVA_VERSION: ${JAVA_VERSION}
  SAST_JAVA_VERSION: ${JAVA_VERSION}
  ##
  ## Maven and JDK versions used for build
  ##
  MAVEN_CONTAINER_VERSION: 3.6.3-jdk-${JAVA_VERSION}-slim
  ##
  ## GraalVM version for native compilation
  ##
  GRAALVM_CONTAINER_VERSION: 20.0.0-java${JAVA_VERSION}
  ##
  ## This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
  ## `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  ##
  MAVEN_REPO_REL_PATH: .m2/repository-maven
  MAVEN_REPO_PATH: $CI_PROJECT_DIR/$MAVEN_REPO_REL_PATH
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2,SSLv3 -Dmaven.repo.local=${MAVEN_REPO_PATH} -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  ##
  ## As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  ## when running from the command line.
  ## `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  ##
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true -U"
  ##
  ## Node version
  ##
  NODE_VERSION: 14.15.0
  ##
  ## Sonar configuration
  ##
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
  GIT_DEPTH: "0" # Tells Git to fetch all the branches of the project, required by the analysis task


##
## Customize variables for CI templates
##
#license_scanning:
#  variables:
#    MAVEN_CLI_OPTS: -DskipTests


##
## Define images to be used in all build steps
##
.maven: &maven
  image: maven:${MAVEN_CONTAINER_VERSION}
  variables:
    MAVEN_REPO_REL_PATH: ".m2/repository-maven"
  ##
  ## Cache dependencies to save some time on build
  ##
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .m2/repository-maven
      - .sonar/cache

.node: &node
  image: node:${NODE_VERSION}-stretch
  ##
  ## Cache dependencies to save some time on build
  ##
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - d4g2020-front/node_modules
  before_script:
    ##
    ## Move current directory to front part
    ##
    - cd d4g2020-front
    ##
    ## Install node dependencies
    ##
    - npm ci


##
## Build jobs
##
build-back:
  stage: build
  <<: *maven
  script:
    - 'mvn -f d4g2020-back $MAVEN_CLI_OPTS package -DskipTests'
  artifacts:
    paths:
      - 'target/*-runner.jar'
      - 'target/lib/*'
      - target/classes/
    expire_in: 20 mins

build-front:
  stage: build
  <<: *node
  script:
    ##
    ## Build project
    ##
    - npm run build
  artifacts:
    paths:
      - dist/
    expire_in: 20mins


##
## Run unit and integration tests, and generate coverage reports
##
test-back:
  stage: test
  <<: *maven
  script:
    - 'mvn -f d4g2020-back $MAVEN_CLI_OPTS verify'


##
## Run Sonarcloud analysis
##
sonarcloud-check:
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
