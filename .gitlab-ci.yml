#
# Add automatic templates
#
include:
  ## - template: License-Scanning.gitlab-ci.yml
  ##
  ## Scan dependencies for known vulnerabilities
  ##
  - template: Dependency-Scanning.gitlab-ci.yml
  ##
  ## Static analysis security testing
  ##
  - template: SAST.gitlab-ci.yml

variables:
  ##
  ## Java version
  ##
  JAVA_VERSION: 11
  LM_JAVA_VERSION: ${JAVA_VERSION}
  SAST_JAVA_VERSION: ${JAVA_VERSION}
  ##
  ## Maven and JDK versions used for build
  ##
  MAVEN_CONTAINER_VERSION: 3.6.3-jdk-${JAVA_VERSION}-slim
  ##
  ## GraalVM version for native compilation
  ##
  GRAALVM_CONTAINER_VERSION: 20.0.0-java${JAVA_VERSION}
  ##
  ## This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
  ## `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  ##
  MAVEN_REPO_REL_PATH: .m2/repository-maven
  MAVEN_REPO_PATH: $CI_PROJECT_DIR/$MAVEN_REPO_REL_PATH
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2,SSLv3 -Dmaven.repo.local=${MAVEN_REPO_PATH} -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  ##
  ## As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  ## when running from the command line.
  ## `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  ##
  MAVEN_CLI_OPTS: "-f d4g2020-back --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true -U"
  ##
  ## Node version
  ##
  NODE_VERSION: 14.15.0
  ##
  ## Sonar configuration
  ##
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
  GIT_DEPTH: "0" # Tells Git to fetch all the branches of the project, required by the analysis task


##
## Customize variables for CI templates
##
#license_scanning:
#  variables:
#    MAVEN_CLI_OPTS: -DskipTests


##
## Define images to be used in all build steps
##
.maven: &maven
  image: maven:${MAVEN_CONTAINER_VERSION}
  variables:
    MAVEN_REPO_REL_PATH: ".m2/repository-maven"
  ##
  ## Cache dependencies to save some time on build
  ##
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .m2/repository-maven
      - .sonar/cache

.node: &node
  image: node:${NODE_VERSION}-stretch
  ##
  ## Cache dependencies to save some time on build
  ##
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - d4g2020-front/node_modules
  before_script:
    ##
    ## Move current directory to front part
    ##
    - cd d4g2020-front
    ##
    ## Install node dependencies
    ##
    - npm ci


##
## Build jobs
##
build-back:
  stage: build
  <<: *maven
  script:
    - 'mvn $MAVEN_CLI_OPTS package -DskipTests'
  artifacts:
    paths:
      - 'd4g2020-back/target/*-runner.jar'
      - 'd4g2020-back/target/lib/*'
      - d4g2020-back/target/classes/
    expire_in: 20 mins

build-front:
  stage: build
  <<: *node
  script:
    ##
    ## Build project
    ##
    - npm run build
  artifacts:
    paths:
      - d4g2020-front/dist/
    expire_in: 20mins


##
## Run unit and integration tests, and generate coverage reports
##
test-back:
  stage: test
  <<: *maven
  script:
    - 'mvn $MAVEN_CLI_OPTS -verify'


##
## Run Sonarcloud analysis
##
sonarcloud-check:
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner

#
# Deploys the website to the remote server.
#
deploy:
  stage: deploy
  image: alpine
  before_script:
    ##
    ## Install rsync and openssh, which are
    ##
    - apk add --no-cache gzip rsync openssh

    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)

    ##
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    ##
    ## Create the SSH directory and give it the right permissions
    ##
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    ##
    ## Assuming you created the SSH_KNOWN_HOSTS variable, uncomment the
    ## following two lines.
    ##
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

  script:
    ##
    ## Deploy front
    ##
    ### Gzip all files to allow serving compressed files without on-the-go zipping
    - find d4g2020-front/dist \( -name '*.css' -o -name '*.js' -o -name '*.html' -o -name '*.xml' -o -name '*.svg' \) -exec gzip --verbose --keep {} \;
    ### Rsync if not already installed, and sync files with remote
    - rsync -vrzt --del --stats d4g2020-front/dist/ $SSH_USER@$SSH_HOST:~/d4g-front/

    ##
    ## Deploy back
    ##
    ### Stop running app
    - ssh $SSH_USER@$SSH_HOST "~/d4g-back/begin-deploy.sh"
    ### Sync libs in case they were updated
    - rsync -vrzt --del --stats d4g2020-back/target/lib/ $SSH_USER@$SSH_HOST:~/d4g-back/lib/
    ### Deploy new executable
    - scp d4g202back/target/d4g202-back-*-runner.jar $SSH_USER@$SSH_HOST:~/d4g-back/executable.jar
    ### Restart app
    - ssh $SSH_USER@$SSH_HOST "~/d4g-back/begin-deploy.sh"

  ##
  ## Only deploy builds from master
  ##
  only:
    refs:
      - master
