#
# Add automatic templates
#
include:
  ## - template: License-Scanning.gitlab-ci.yml
  ##
  ## Scan dependencies for known vulnerabilities
  ##
  - template: Dependency-Scanning.gitlab-ci.yml
  ##
  ## Static analysis security testing
  ##
  - template: SAST.gitlab-ci.yml

variables:
  ##
  ## Java version
  ##
  JAVA_VERSION: 11
  LM_JAVA_VERSION: ${JAVA_VERSION}
  SAST_JAVA_VERSION: ${JAVA_VERSION}
  ##
  ## Maven and JDK versions used for build
  ##
  MAVEN_CONTAINER_VERSION: 3.6.3-jdk-${JAVA_VERSION}-slim
  ##
  ## GraalVM version for native compilation
  ##
  GRAALVM_CONTAINER_VERSION: 20.0.0-java${JAVA_VERSION}
  ##
  ## This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
  ## `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  ##
  MAVEN_REPO_REL_PATH: .m2/repository-maven
  MAVEN_REPO_PATH: $CI_PROJECT_DIR/$MAVEN_REPO_REL_PATH
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2,SSLv3 -Dmaven.repo.local=${MAVEN_REPO_PATH} -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  ##
  ## As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  ## when running from the command line.
  ## `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  ##
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true -U"
  ##
  ## Node version
  ##
  NODE_VERSION: 14.15.0


##
## Customize variables for CI templates
##
#license_scanning:
#  variables:
#    MAVEN_CLI_OPTS: -DskipTests

cache:
  key: "branch-${CI_COMMIT_REF_SLUG}"
  paths:
    ##
    ## Cache dependencies to save some time on build
    ##
    - .m2/repository-maven
    - .m2/repository-native
    - d4g2020-front/node_modules


##
## Define images to be used in all build steps
##
.maven: &maven
  image: maven:${MAVEN_CONTAINER_VERSION}
  variables:
    MAVEN_REPO_REL_PATH: ".m2/repository-maven"

.node: &node
  image: node:${NODE_VERSION}-stretch
  before_script:
    ##
    ## Move current directory to front part
    ##
    - cd d4g2020-front
    ##
    ## Install node dependencies
    ##
    - npm ci


##
## Build jobs
##
build:back:
  stage: build
  <<: *maven
  script:
    - 'mvn -f d4g2020-back $MAVEN_CLI_OPTS package -DskipTests'
  artifacts:
    paths:
      - 'target/*-runner.jar'
      - 'target/lib/*'
    expire_in: 20 mins

build:front:
  stage: build
  <<: *node
  script:
    ##
    ## Build project
    ##
    - npm run build
  artifacts:
    paths:
      - dist/
    expire_in: 20mins


##
## Run unit and integration tests, then perform a Sonar analysis.
##
## SonarQube should only be run on base of the native OR standard build.
## We chose the native build because it activates the integration tests.
##
## The SonarQube analysis can only be performed for the current repo, since externatl repo won't
## have the Sonarcloud token. As a consequence, a job for native tests is performed to make sure
## tests still pass.
##
test:back:
  stage: test
  <<: *maven
  script:
    - 'mvn -f d4g2020-back $MAVEN_CLI_OPTS verify'
